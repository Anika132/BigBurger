{"version":3,"sources":["components/UI/Input/Input.jsx","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.jsx","containers/Checkout/ContactData/ContactData.jsx","containers/Checkout/Checkout.jsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputClasses","classes","InputElement","inputElement","invalid","shouldValidate","isTouched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","BurgerCont","ContactData","checkoutSummary","react_default","role","aria-label","Burger","ingredients","belongToCheckoutSummary","Button","btnType","clicked","onCheckoutCancelled","onCheckoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","touched","street","zipCode","minlength","maxlength","isNumeric","country","email","isEmail","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","this","rules","isValid","trim","length","test","_this2","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","react_router","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","path","match","component"],"mappings":"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","file":"static/js/3.92c4d580.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css';\nconst input = (props) => {\n    const inputClasses = [classes.InputElement];\n    let inputElement = null;\n    if (props.invalid && props.shouldValidate && props.isTouched) {\n        inputClasses.push(classes.Invalid);\n    }\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />;\n            break;\n        case ('select'):\n            inputElement =\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}\n                >\n                    {props.elementConfig.options.map(option => (\n                        <option\n                            key={option.value}\n                            value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n    }\n    return (\n\n        <div className={classes.Input}>\n\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n}\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input_s67N0\",\"Label\":\"Input_Label__n-1m\",\"InputElement\":\"Input_InputElement_2-aFx\",\"Invalid\":\"Input_Invalid_1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary_1xBm4\",\"BurgerCont\":\"CheckoutSummary_BurgerCont_30b-m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData_1J81r\",\"Input\":\"ContactData_Input_19h-A\"};","import React from 'react';\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1><span role=\"img\" aria-label=\"\">😋</span>&nbsp;We hope it tastes well !!&nbsp;<span role=\"img\" aria-label=\"\">😋</span></h1>\n            <div className={classes.BurgerCont}>\n                <Burger ingredients={props.ingredients} belongToCheckoutSummary />\n            </div>\n            <Button\n                btnType=\"Danger\"\n                clicked={props.onCheckoutCancelled}>CANCEL</Button>\n            <Button\n                btnType=\"Success\"\n                clicked={props.onCheckoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport withErrorHandler from '../../../HOC/withErrorHandler/withErrorHandler'\nimport InputElement from \"../../../components/UI/Input/Input\";\nimport * as orderActions from '../../../store/actions/index';\nimport { updateObject } from '../../../shared/utility';\n\nclass ContactData extends Component {\n\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your Street Address'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your zipCode'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minlength: 5,\n                    maxlength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Enter your emailid'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' },\n                    ]\n                },\n                value: 'fastest',\n                valid: true,\n                touched: false\n            },\n        },\n        formIsValid: false\n    }\n    componentDidMount() {\n        if (this.props.email) {\n            const updatedFormElement = updateObject(this.state.orderForm['email'], {\n                value: this.props.email,\n                touched: true,\n                valid: true\n            });\n            const updatedOrderForm = updateObject(this.state.orderForm, {\n                ['email']: updatedFormElement\n            });\n\n            let formIsValid = true;\n            formIsValid = updatedOrderForm['email'].valid && formIsValid;\n            this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n        }\n\n    }\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules)\n            return true;\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        if (rules.minlength) {\n            isValid = value.length >= rules.minlength && isValid;\n        }\n        if (rules.maxlength) {\n            isValid = value.length <= rules.minlength && isValid;\n        }\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderBurger(order, this.props.token);\n\n    }\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: this.checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n    }\n\n\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <InputElement\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        isTouched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid} >ORDER</Button>\n            </form>\n        );\n        if (this.state.loading) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n        email: state.auth.email\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(orderActions.purchaseBurger(orderData, token))\n    }\n\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from '../Checkout/ContactData/ContactData'\n\nclass Checkout extends Component {\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n    render() {\n        let summary = <Redirect to=\"/\" />\n\n        if (this.props.ings) {\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary\n                        ingredients={this.props.ings}\n                        onCheckoutCancelled={this.checkoutCancelledHandler}\n                        onCheckoutContinued={this.checkoutContinuedHandler} />\n                    <Route path={this.props.match.path + '/contact-data'} component={ContactData} />\n                </div>\n            );\n\n        }\n        return summary;\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}