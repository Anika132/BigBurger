{"version":3,"sources":["components/UI/Input/Input.jsx","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputClasses","classes","InputElement","inputElement","invalid","shouldValidate","isTouched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","error","state","controls","email","type","placeholder","validation","required","isEmail","valid","touched","password","minLength","isSignUp","checkValidity","rules","isValid","trim","length","maxLength","test","isNumeric","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_home_anika_Visual_WorkSpace_Lumos_burger_builder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","errorMsg","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.0a021e30.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Input.css';\nconst input = (props) => {\n    const inputClasses = [classes.InputElement];\n    let inputElement = null;\n    if (props.invalid && props.shouldValidate && props.isTouched) {\n        inputClasses.push(classes.Invalid);\n    }\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed}\n            />;\n            break;\n        case ('select'):\n            inputElement =\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}\n                >\n                    {props.elementConfig.options.map(option => (\n                        <option\n                            key={option.value}\n                            value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>;\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n    }\n    return (\n\n        <div className={classes.Input}>\n\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n}\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input_s67N0\",\"Label\":\"Input_Label__n-1m\",\"InputElement\":\"Input_InputElement_2-aFx\",\"Invalid\":\"Input_Invalid_1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth_2YUr1\",\"error\":\"Auth_error_3rj5W\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\nimport { updateObject } from \"../../shared/utility\";\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Enter your email id'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Enter password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignUp: true\n    }\n    checkValidity = (value, rules) => {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    componentDidMount() {\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n\n    }\n\n    inputChangedHandler = (event, controlName) => {\n\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n        this.setState({ controls: updatedControls })\n    }\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\n    }\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignUp: !prevState.isSignUp }\n        });\n    }\n    render() {\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form = formElementsArray.map(formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                isTouched={formElement.config.touched}\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ));\n        if (this.props.loading)\n            form = <Spinner />\n        let errorMsg = null;\n        if (this.props.error) {\n            errorMsg = (\n                <p className={classes.error}>{this.props.error.message}</p>\n            )\n        }\n        let authRedirect = null;\n        if (this.props.isAuthenticated) {\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMsg}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType='Success' >SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    btnType='Danger' >SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}