{"version":3,"sources":["containers/Orders/Order/Order.css","containers/Orders/Order/Order.jsx","containers/Orders/Orders.jsx"],"names":["module","exports","Order","ingredient","order","props","emojis","salad","meat","bacon","cheese","ingredients","ingredientName","push","name","amount","emoji","ingredientOutput","map","ig","react_default","a","createElement","className","classes","key","role","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","Order_Order","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,oBAAAC,WAAA,4JC4BHC,EA3BD,SAACC,GACX,IAAMC,EAAS,CACXC,MAAS,eACTC,KAAQ,eACRC,MAAS,eACTC,OAAU,gBAERC,EAAc,GACpB,IAAK,IAAIC,KAAkBP,EAAMM,YAC7BA,EAAYE,KAAK,CACbC,KAAMF,EACNG,OAAQV,EAAMM,YAAYC,GAC1BI,MAAOV,EAAOM,KAItB,IAAMK,EAAmBN,EAAYO,IAAI,SAAAC,GACrC,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQrB,WAC5BsB,IAAKN,EAAGL,MAAOK,EAAGL,KADf,IACqBM,EAAAC,EAAAC,cAAA,QAAMI,KAAK,OAAOP,EAAGH,OAD1C,IACyDG,EAAGJ,OAD5D,OAGX,OACIK,EAAAC,EAAAC,cAAA,OAAMC,UAAWC,IAAQtB,OACrBkB,EAAAC,EAAAC,cAAA,yBAAiBL,GACjBG,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,+BAA4BK,OAAOC,WAAWvB,EAAMwB,OAAOC,QAAQ,+BCjBpFC,8LAIEC,KAAK3B,MAAM4B,cAAcD,KAAK3B,MAAM6B,MAAOF,KAAK3B,MAAM8B,yCAGtD,IAAIC,EAAShB,EAAAC,EAAAC,cAACe,EAAA,EAAD,MASb,OARKL,KAAK3B,MAAMiC,UACZF,EAASJ,KAAK3B,MAAM+B,OAAOlB,IAAI,SAAAd,GAAK,OAChCgB,EAAAC,EAAAC,cAACiB,EAAD,CACId,IAAKrB,EAAMoC,GACX7B,YAAaP,EAAMO,YACnBkB,MAAOzB,EAAMyB,WAIrBT,EAAAC,EAAAC,cAAA,WACKc,UAlBIK,aAqCNC,sBAbS,SAAAC,GACpB,MAAO,CACHP,OAAQO,EAAMvC,MAAMgC,OACpBE,QAASK,EAAMvC,MAAMkC,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,SAGA,SAAAU,GACvB,MAAO,CACHZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,OAG/DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.a62c17ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order_QOQo_\",\"ingredient\":\"Order_ingredient_1dWVt\"};","import React from 'react';\nimport classes from './Order.css';\nconst order = (props) => {\n    const emojis = {\n        'salad': \"🥗\",\n        'meat': '🥓',\n        'bacon': \"🍗\",\n        'cheese': '🧀'\n    }\n    const ingredients = [];\n    for (let ingredientName in props.ingredients) {\n        ingredients.push({\n            name: ingredientName,\n            amount: props.ingredients[ingredientName],\n            emoji: emojis[ingredientName]\n        });\n    }\n\n    const ingredientOutput = ingredients.map(ig => {\n        return <span className={classes.ingredient}\n            key={ig.name}>{ig.name} <span role=\"img\">{ig.emoji}</span>({ig.amount})</span>\n    })\n    return (\n        < div className={classes.Order} >\n            <p>Ingredients: {ingredientOutput}</p>\n            <p>Price : <strong>&nbsp;&#8377;&nbsp;{Number.parseFloat(props.price).toFixed(2)}</strong></p>\n        </div >\n    );\n};\nexport default order;","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nimport axios from '../../axios-orders';\nimport Order from './Order/Order';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../HOC/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index'\nclass Orders extends Component {\n\n\n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token, this.props.userId);\n    }\n    render() {\n        let orders = <Spinner />\n        if (!this.props.loading) {\n            orders = this.props.orders.map(order => (\n                <Order\n                    key={order.id}\n                    ingredients={order.ingredients}\n                    price={order.price} />\n            ))\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n\n        );\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}